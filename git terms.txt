Branch:
A version of the repository that diverges from the main working project. Branches can be a new version of a repository, experimental changes, or personal forks of a repository for users to alter and test changes.
Git Checkout:
The git checkout command is used to switch branches in a repository. git checkout testing-el would take you to the testing-el branch whereas git checkout master would drop you back into master. Be careful with your staged files and commits when switching between branches.
Cherry-picking:
When cherry-picking a commit in Git, you are taking an older commit, and rerunning it at a defined location. Git copies the changes from the original commit, and then adds them to the current location.
Clone:
A clone is a copy of a repository or the action of copying a repository. When cloning a repository into another branch, the new branch becomes a remote-tracking branch that can talk upstream to its origin branch (via pushes, pulls, and fetches).
Fetch:
By performing a Git fetch, you are downloading and copying that branch's files to your workstation. Multiple branches can be fetched at once, and you can rename the branches when running the command to suit your needs.
Fork:
Creates a copy of a repository.
HEAD:
HEAD is a reference variable used to denote the most current commit of the repository in which you are working. When you add a new commit, HEAD will then become that new commit.
Index:
The working, or staging, area of Git. Files that have been changed, added and deleted will be staged within the index until you are ready to commit the files. To see what is set in your Git index, run git status within your repository. The green files are staged and ready to commit, whereas the red files have not yet been added to staging for the next commit.
Master:
The primary branch of all repositories. All committed and accepted changes should be on the master branch. You can work directly from the master branch, or create other branches.
Merge:
Taking the changes from one branch and adding them into another (traditionally master) branch. These commits are usually first requested via pull request before being merged by a project maintainer.
Origin:
The conventional name for the primary version of a repository. Git also uses origin as a system alias for pushing and fetching data to and from the primary branch. For example, git push origin master, when run on a remote, will push the changes to the master branch of the primary repository database.
Pull/Pull Request:
If someone has changed code on a separate branch of a project and wants it to be reviewed to add to the master branch, that someone can put in a pull request. Pull requests ask the repo maintainers to review the commits made, and then, if acceptable, merge the changes upstream. A pull happens when adding the changes to the master branch.
Push:
Updates a remote branch with the commits made to the current branch. You are literally "pushing" your changes onto the remote.
Rebase:
When rebasing a git commit, you can split the commit, move it, squash it if unwanted, or effectively combine two branches that have diverged from one another.
Remote:
A copy of the original branch. When you clone a branch, that new branch is a remote, or clone. Remotes can talk to the origin branch, as well as other remotes for the repository, to make communication between working branches easier.
Repository ("Repo"):
In many ways, you can think of a Git repository as a directory that stores all the files, folders, and content needed for your project. What it actually is, is the object database of the project, storing everything from the files themselves, to the versions of those files, commits, deletions, et cetera. Repositories are not limited by user, and can be shared and copied (see: fork).
Stash:
While working with Git, you may need to make multiple changes to files, but you may not want all changes to go in one commit. If you want to pause the changes you are working on now in favor of working on another issue or improvement, you can "stash" your changes, essentially clearing them from the staging area until the changes are called again. You can only stash one set of changes at a time. To stash your staging area use git stash [files]; to retrieve the stashed files, run git stash pop. You can also clear the stashed files with git stash drop.
Tag:
Tags are used to define which portions of a project's Git history is most important. Often this is used to note point releases of a project. Tags can be added to the commit you are working with or added after-the-fact when needed.
Upstream:
While there is not necessarily a default "upstream" or "downstream" for Git projects, upstream can be considered where you push your Git changes — this is often the master branch of the project within the origin
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SETTING UP AND GENERATING N LINKING OF SSH TO GITHUB
The commands below will configure Git. Be sure to enter your own information inside the quotes (but include the quotation marks)!
git config --global user.name "Your Name"
git config --global user.email "yourname@example.com"
If you opted to use the private GitHub email address, the second command will look something like this:
git config --global user.email "123456789+odin@users.noreply.github.com" # Remember to use your own private GitHub email here.
GitHub recently changed the default branch on new repositories from master to main. Change the default branch for Git using this command:
git config --global init.defaultBranch main
To enable colorful output with git, type
git config --global color.ui auto
You’ll also likely want to set your default branch reconciliation behavior to merging. You’ll learn what all those terms mean later in the curriculum, but for now just know that we suggest running the below command as part of the Git setup process when doing The Odin Project.
git config --global pull.rebase false
To verify that things are working properly, enter these commands and verify whether the output matches your name and email address.
git config --get user.name
git config --get user.email

macOS Users: Run these two commands to tell Git to ignore .DS_Store files, which are automatically created when you use Finder to look into a folder. .DS_Store files are invisible to the user and hold custom attributes or metadata (like thumbnails) for the folder, and if you don’t configure Git to ignore them, pesky .DS_Store files will show up in your commits. Remember to copy and paste each of these commands into your terminal.
echo .DS_Store >> ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global

Step 2.3: Create an SSH key
An SSH key is a cryptographically secure identifier. It’s like a really long password used to identify your machine. GitHub uses SSH keys to allow you to upload to your repository without having to type in your username and password every time.
First, we need to see if you have an Ed25519 algorithm SSH key already installed. Type this into the terminal and check the output with the information below:
ls ~/.ssh/id_ed25519.pub
If a message appears in the console containing the text “No such file or directory”, then you do not yet have an Ed25519 SSH key, and you will need to create one. If no such message has appeared in the console output, you can proceed to step 2.4.
To create a new SSH key, run the following command inside your terminal.
ssh-keygen -t ed25519
    When it prompts you for a location to save the generated key, just push Enter.
    Next, it will ask you for a password; enter one if you wish, but it’s not required.

Step 2.4: Link your SSH key with GitHub
Now, you need to tell GitHub what your SSH key is so that you can push your code without typing in a password every time.
First, you’ll navigate to where GitHub receives our SSH key. Log into GitHub and click on your profile picture in the top right corner. Then, click on Settings in the drop-down menu.
Next, on the left-hand side, click SSH and GPG keys. Then, click the green button in the top right corner that says New SSH Key. Name your key something that is descriptive enough for you to remember what device this SSH key came from, for example linux-ubuntu. Leave this window open while you do the next steps.
Now you need to copy your public SSH key. To do this, we’re going to use a command called cat to read the file to the console. (Note that the .pub file extension is important in this case.)
cat ~/.ssh/id_ed25519.pub
Highlight and copy the entire output from the command. If you followed the instructions above, the output will likely begin with ssh-ed25519 and end with your username@hostname.
Now, go back to GitHub in your browser window and paste the key you copied into the key field. Keep the key type as Authentication Key and then, click Add SSH key. You’re done! You’ve successfully added your SSH key!

Step 2.5 Testing your key
Follow the GitHub directions for testing your SSH connection. Make sure the fingerprint output in the terminal matches one of the four GitHub’s public fingerprints. (Don’t forget to omit the $ when you copy and paste the code!).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
warning: adding embedded git repository: odin-tries
hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint:   git submodule add <url> odin-tries
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint:   git rm --cached odin-tries
hint: See "git help submodule" for more information.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Steps to Push a Local Repository to GitHub
Create a New Repository on GitHub:
Go to your GitHub account.
Click on the + icon in the top right corner and select "New repository".
Fill in the repository name (it can be the same as reponame or different), description, and other settings.
Click on "Create repository".
Add the Remote Repository:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore.
-->>or create a new repository on the command line
echo "# xxx" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/ShinichiShi/xxx.git
git push -u origin main
-->>or push an existing repository from the command line
git remote add origin https://github.com/ShinichiShi/xxx.git
git branch -M main
git push -u origin main
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
.GITIGNORE FILES:
The .gitignore file is a text file that tells Git which files or folders to ignore in a project.

A local .gitignore file is usually placed in the root directory of a project. You can also create a global .gitignore file and any entries in that file will be ignored in all of your Git repositories.
To create a local .gitignore file, create a text file and name it .gitignore (remember to include the . at the beginning). Then edit this file as needed. Each new line should list an additional file or folder that you want Git to ignore.
The entries in this file can also follow a matching pattern.
* is used as a wildcard match
/ is used to ignore pathnames relative to the .gitignore file
# is used to add comments to a .gitignore file

This is an example of what the .gitignore file could look like:
# Ignore Mac system files
.DS_store
# Ignore node_modules folder
node_modules
# Ignore all text files
*.txt
# Ignore files related to API keys
.env
# Ignore SASS config files
.sass-cache

To add or change your global .gitignore file, run the following command:
git config --global core.excludesfile ~/.gitignore_global
This will create the file ~/.gitignore_global. Now you can edit that file the same way as a local .gitignore file. All of your Git repositories will ignore the files and folders listed in the global .gitignore file.
How to Untrack Files Previously Committed from New Gitignore
To untrack a single file, ie stop tracking the file but not delete it from the system use:
git rm --cached filename
To untrack every file in .gitignore:
First commit any outstanding code changes, and then run:
git rm -r --cached
This removes any changed files from the index(staging area), then run:
git add .
Commit it:
git commit -m ".gitignore is now working"
To undo git rm --cached filename, use git add filename
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Performing Pull request
